text(qm,c(rownames(q)))
q1<-cmdscale(q1)
plot(q1,type='p')
abline(v=0,h=0)
text(qm,c(rownames(q)))
set.seed(5478993)
q<-matrix(sample(c(1:9),25,replace=T),nrow=5,ncol=5)
car_names=c('fe','Bu','enzo','Mas','Au')
colnames(q)<-car_names
rownames(q)<-car_names
q
qm<-dist(q)
qm<-cmdscale(qm)
plot(qm, type='p')
abline(v=0,h=0)
#
q1<-matrix(rnorm(100),nrow=5)
q1<-dist(q1)
q1<-cmdscale(q1)
plot(q1,type='p')
abline(v=0,h=0)
text(qm,c(rownames(q)))
#유사부류찾기 - 거리개념
#학업집중도에따라 학생반편성해보기
ac<-read.csv(c:/java/aca.csv)
#유사부류찾기 - 거리개념
#학업집중도에따라 학생반편성해보기
ac<-read.csv('c:/java/aca.csv',stringsAsFactors = F)
head(aca)
head(ac)
aca<-dist(ac) #유클리드거리계산
aca_xy<-cmdscale(aca) # 2차원좌표형식
plot(aca_xy)
plot(aca_xy,type='n')
text(aca_xy,as.character(1:52))
#고객들이 선호하는 음식메뉴유사성알아보기
food<-read.csv('c:/java/food.csv',stringsAsFactors = F)
head(food)
food
f<-dist(food)
f_xy<-cmdscale(f)
plot(f_xy)
f
text(aca_xy,as.character(1:40))
plot(f_xy,type='n')
text(aca_xy,as.character(1:40))
text(f_xy,as.character(1:40))
text(f_xy,rownames(f_xy))
plot(f_xy,type='n')
text(f_xy,rownames(f_xy))
text(f_xy,rownames(food))
plot(f_xy,type='n')
text(f_xy,rownames(food))
text(f_xy,colnames(food))
plot(f_xy,type='n')
text(f_xy,colnames(food))
text(f_xy,rownames(food))
plot(f_xy,type='n')
text(f_xy,rownames(food))
#
food2<-read.csv('c:/java/food.csv')
food2<-food2[,-1]
#
food2<-read.csv('c:/java/food.csv')
food2<-food2[,-1] #1열제외
food2<-t(as.matrix(food2)%*%as.matrix(food2))#기존디이터 행열로전환
food2<-t(as.matrix(food2) %*% as.matrix(food2))#기존디이터 행열로전환
food2<-t(as.matrix(food2)) %*% as.matrix(food2)#기존디이터 행열로전환
f2<-dist(food2)
f2_xy<-cmdscale(f2)
plot(f2_xy)
plot(f2_xy,type='n')
text(f2_xy,rownames(food))
text(f2_xy,rownames(food2))
text(f2_xy,colnames(food2))
plot(f2_xy,type='n')
text(f2_xy,colnames(food2))
abline(v=0,h=0)
mean(x)
x<-(1,2,3,NA)
mean(x)
x<-c(1,2,3,NA)
mean(x)
# 1: -1 계산하면 -1 나와야된다
#거리계산이 제대로되도록 자기자신을 한번더 곱함
food2
#김치판매량 시계열 예측
read.csv('c:/java/k.csv')
#김치판매량 시계열 예측
kim<-read.csv('c:/java/k.csv')
plot(kim)
head(kim)
plot(kim$대형마트수량,type='l')
plot(kim$대형마트수량,type='l',xlab='주',ylab='||')
plot(kim$대형마트수량,type='l',xlab='주',ylab='/|')
plot(kim$대형마트수량,type='l',xlab='주',ylab='//|')
plot(kim$대형마트수량,type='l',xlab='주',ylab='/\')
plot(kim$대형마트수량,type='l',xlab='주',ylab='/\')
plot(kim$대형마트수량,type='l',xlab='주',ylab='')
plot(kim$대형마트수량,type='l',xlab='주',ylab='')
plot(kim$대형마트수량,type='l',xlab='주',ylab='원')
plot(kim$대형마트수량,type='l',xlab='주',ylab='원')
plot(kim$백화점수량,type='l',xlab='주',ylab='원')
plot(kim$대형마트수량,type='l',xlab='주',ylab='수량')
plot(kim$백화점수량,type='l',xlab='주',ylab='수량')
library(zoo)
dates<-as.Date(as.character(주마지막일자),format='%Y%m%d')
all_sales<-data.frame(cbind(대형마트수량,백화점수량,수퍼수량,편의점수량))
z_sales<-zoo(all_sales,dates)
plot(z_sales,screen=1)
head(kim)
all_sales<-data.frame(cbind(대형마트수량,백화점수량,수퍼수량,편의점수량))
source('D:/빅데이터/R/helloR3/ARIMA.R', encoding = 'UTF-8', echo=TRUE)
all_sales<-data.frame(cbind(대형마트수량,백화점수량,수퍼수량,편의점수량,kim))
all_sales<-data.frame(cbind(kim$대형마트수량,kim$백화점수량,kim$수퍼수량,kim$편의점수량))
z_sales<-zoo(all_sales,dates)
dates<-as.Date(as.character(주마지막일자),format='%Y%m%d')
dates<-as.Date(as.character(kim$주마지막일자),format='%Y%m%d')
dates<-as.Date(as.character(kim$주마지막일자),format='%Y%m%d')
all_sales<-data.frame(cbind(kim$대형마트수량,kim$백화점수량,kim$수퍼수량,kim$편의점수량))
z_sales<-zoo(all_sales,dates)
plot(z_sales,screen=1)
plot(z_sales,screen=1,col=c('red','blue','orange','purple'))
plot(z_sales,screen=c(1,4),col=c('red','blue','orange','purple'))
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,kim$주주마지막일자='20150101',kim$주마지막일자='20151231')
tail(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주주마지막일자='20150101',주마지막일자='20151231')
tail(sale2015)
plot(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자='20150101',주마지막일자='20151231')
tail(sale2015)
plot(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자>='20150101',주마지막일자<='20151231')
tail(sale2015)
plot(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자>='20150101',주마지막일자<='20151231')
tail(sale2015)
plot(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자>='20150101',주마지막일자<='20151231')
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자>='20150101',주마지막일자<='20151231')
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,kim$주주마지막일자>='20150101',kim$주마지막일자<='20151231')
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,kim$주주마지막일자>='20150101',kim$주마지막일자<='20151231')
all_sales<-data.frame(cbind(kim$대형마트수량,kim$백화점수량,kim$수퍼수량,kim$편의점수량))
alls_sal
all_sales
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,kim$주주마지막일자>='20150101',kim$주마지막일자<='20151231')
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,kim$주주마지막일자='20150101',kim$주마지막일자='20151231')
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자='20150101',주마지막일자='20151231')
tail(sale2015)
sale2015
plot(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자>='20150101',주마지막일자<='20151231')
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(all_sales,주주마지막일자='20150101',주마지막일자='20151231')
?subset
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주주마지막일자>='20150101',주마지막일자<='20151231',select = c(대형마트수량,백화점수량,수퍼수량,편의점수량))
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주주마지막일자>='20150101' &주마지막일자<='20151231',select = c(대형마트수량,백화점수량,수퍼수량,편의점수량))
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주주마지막일자>='20150101' && 주마지막일자<='20151231',select = c(대형마트수량,백화점수량,수퍼수량,편의점수량))
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주주마지막일자>='20150101' & 주마지막일자<='20151231',select = c(대형마트수량,백화점수량,수퍼수량,편의점수량))
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주마지막일자>='20150101' & 주마지막일자<='20151231',select = c(대형마트수량,백화점수량,수퍼수량,편의점수량))
tail(sale2015)
sale2015
plot(sale2015)
#마지막년도를기준으로 잘라서 추세를 그래프로확인
sale2015<-subset(kim,주마지막일자>='20150101' & 주마지막일자<='20151231',select = c(주마지막일자,대형마트수량,백화점수량,수퍼수량,편의점수량))
tail(sale2015)
sale2015
plot(sale2015)
kim2015<-read.csv('c:/java/k2.csv')
kim2015<-read.csv('c:/java/k2.csv')
k_sales<-zoo(kim2015$SALES)
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
#
sales2015<-zoo(all_sales,dates)
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
kim2015<-read.csv('c:/java/k2.csv')
k_sales<-zoo(kim2015$SALES,as.Date(as.character(kim2015$LAST_WK),format = '%Y%m%d'))
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
head(merge_2015)
plot(merge_2015)
#각그래프 간의 상관과계알아봄
ccf(k_sales,window(sales2015))
?ccf
#각그래프 간의 상관과계알아봄
ccf(k_sales,sales2015))
#각그래프 간의 상관과계알아봄
ccf(k_sales,sales2015)
#각그래프 간의 상관과계알아봄
ccf(k_sales,window(sales2015)
#각그래프 간의 상관과계알아봄
ccf(k_sales,window(sales2015))
#각그래프 간의 상관과계알아봄
ccf(k_sales,window(sales2015))
#각그래프 간의 상관과계알아봄
window(sales2015)
k_sales
#각그래프 간의 상관과계알아봄
window(sales2015)
k_sales
plot(window(sales2015))
plot(k_sales)
ccf(k_sales,window(sales2015$X1))
ccf(k_sales,window(sales2015$X2))
plot(window(sales2015))
plot(k_sales)
ccf(k_sales,window(sales2015$X1))
ccf(k_sales,window(sales2015$X2))
plot(k_sales)
plot(window(sales2015))
#
sales2015<-zoo(all_sales,dates)
kim2015<-read.csv('c:/java/k2.csv')
k_sales<-zoo(kim2015$SALES,as.Date(as.character(kim2015$LAST_WK),format = '%Y%m%d'))
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
head(merge_2015)
plot(merge_2015)
head(merge_2015)
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
merge_k<-merge(ksale=window(k_sale))
plot(merge_k)
merge_k<-merge(ksale=window(k_sale))
merge_k<-merge(k_s=window(k_sales))
plot(merge_k)
merge_k<-merge(k_s=window(k_sales),k_sales)
plot(merge_k)
merge_k<-merge(k_s=window(k_sales),k_sales,k_sales,ksales)
merge_k<-merge(k_s=window(k_sales),k_sales,k_sales,k_sales)
merge_k<-merge(k_s=window(k_sales),k_sales,k_sales,k_sales)
merge_k<-merge(k_s=window(k_sales),k_s=window(k_sales),k_sales,k_sales)
plot(merge_k)
ccf(merge_k,window(sales2015))
ccf(merge_k,window(sales2015))
# merge_k<-merge(k_s=window(k_sales),k_s=window(k_sales),k_sales,k_sales)
# plot(merge_k)
ccf(k_sales,window(sales2015$X1))
ccf(k_sales,window(sales2015$X2))
# merge_k<-merge(k_s=window(k_sales),k_s=window(k_sales),k_sales,k_sales)
# plot(merge_k)
ccf(k_sales,window(sales2015$X1))
plot(window(sales2015))
# merge_k<-merge(k_s=window(k_sales),k_s=window(k_sales),k_sales,k_sales)
# plot(merge_k)
ccf(k_sales,window(sales2015$X1))
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
merge_2015<-merge(k_sale=window(sales2015,start = '2015-01-01',end = '2015-12-31'),k_sales,all=F)
head(merge_2015)
plot(merge_2015)
plot(diff(sales2015))
#자기상관 함수
acf(sales2015)
#자기상관 시계열에존재하는지 p값조사
Box.test(sales2015)
#자기상관 시계열에존재하는지 p값조사
Box.test(sales2015$X1)
Box.test(sales2015$X1,type='Ljung-Box')
#Box-Ljung
Box.test(sales2015$X1,type='Ljung-Box')
plot(sales2015$X1)
par(mfrow=c(2,2))
r1<-roolapply(sales2015$X1,2,mean)
r1<-rollapply(sales2015$X1,2,mean)
r1<-rollapply(sales2015$X1,2,mean)
r1<-rollapply(sales2015$X1,2,mean)
r1<-rollapply(sales2015$X1,2,mean)
r2<-rollapply(sales2015$X1,3,mean)
r3<-rollapply(sales2015$X1,4,mean)
r4<-rollapply(sales2015$X1,5,mean)
r5<-rollapply(sales2015$X1,8,mean)
plot(r1)
plot(r1)
plot(r1)
plot(r2)
plot(r3)
plot(r4)
plot(r5)
plot(r1)
plot(r4)
plot(r1)
plot(r3)
z=c(1:3,NA)
z
z==NA
z==1
example(solve)
#이동평균 묶음 width수는 얼마가
#acf 통해 자기상관수를사용
r11<-rollapply(sales2015$X1,11,mean)
plot(r11)
plot(r11)
#이동평균 묶음 width수는 얼마가
#acf 통해 자기상관수를사용
par(mfrow=c(1,1))
r11<-rollapply(sales2015$X1,11,mean)
plot(r11)
plot(r1)
plot(r5)
r11<-rollapply(sales2015$X1,11,mean)
plot(r11)
#Box-pierce
Box.test(sales2015$X1)
#Box-Ljung
Box.test(sales2015$X1,type='Ljung-Box')
#
install.packages("forecast")
library(forcas)
library(forecast)
f1<-auto.arima(ts(log(sales2015$X1),frequency = 52))
plot(f1)
plot(f1)
plot(forcast(f1))
plot(forecast(f1))
f1<-auto.arima(ts(log(sales2015$X1),frequency = 52))
plot(forecast(f1))
# + season
f2<-auto.arima(ts(log(sales2015$X1),frequency = 52),seasonal = T)
plot(forecast(f2))
plot(forecast(f2))
# + season
f2<-auto.arima(ts(log(sales2015$X1),frequency = 52),seasonal = T)
plot(forecast(f2))
#f1<-auto.arima(ts(log(sales2015$X1),frequency = 52))
f1<-auto.arima(ts(log(sales2015$X1),frequency = 52))
plot(forecast(f1))
#생성된모형으로 값예측
v<- predict(f2,n.ahead = 10)
plot(v)
#생성된모형으로 값예측
v<- predict(f2,n.ahead = 10)
# + season
f2<-auto.arima(ts(log(sales2015$X1),frequency = 52),seasonal = T)
plot(forecast(f2))
#생성된모형으로 값예측
v<- predict(f2,n.ahead = 10)
# 향후 10주 마트판매량 예측
v
x<-1:100
x
sum(x>50)
sum(x>99)
sum(x>50)
#설문조사내용중 직장있고 30대 기혼자는 쿠폰사용 구매할수 있게
s<-read.csv('c:/java/skin.csv')
s
#범주형 factor
str(s)
library(rpart)
tree1<-rpart(쿠폰반응여부,dayt=skin,control=rpart.control(minsplit=2))
tree1<-rpart(쿠폰반응여부~.,dayt=skin,control=rpart.control(minsplit=2))
tree1<-rpart(쿠폰반응여부~.,dayt=s,control=rpart.control(minsplit=2))
s
#범주형 factor
str(s)
library(rpart)
tree1<-rpart(쿠폰반응여부~.,dayt=s,control=rpart.control(minsplit=2))
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=2))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T)
text(tree1,use.n=T,col='blue')
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
tree2<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=3))
plot(tree2,compress = T,uniform=T)
text(tree2,use.n=T,col='blue')
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=2))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=2))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
tree2<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=3))
plot(tree2,compress = T,uniform=T)
text(tree2,use.n=T,col='blue')
tree2<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=3))
plot(tree2,compress = T,uniform=T)
text(tree2,use.n=T,col='blue')
text(tree2,use.n=T,col='red')
tree2<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=3))
plot(tree2,compress = T,uniform=T)
text(tree2,use.n=T,col='red')
tree2<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=3))
plot(tree2,compress = T,uniform=T)
text(tree2,use.n=T,col='red')
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=2))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=1))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=1))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
tree1<-rpart(쿠폰반응여부~.,data=s,control=rpart.control(minsplit=1))
plot(tree1,compress = T,uniform=T)
text(tree1,use.n=T,col='blue')
#기계학습의 하나로 특정항목에 대한 의사결정 규칙을 이진트리형태로 분류해나가는 기법
#수치형/ 범주형 모두가능
# 카이제곱 t검증 F검증
#CART CHAID 알고리즘이나 기계학습 계열(엔트로피,정보이득인) ID3 C4.5 C5.0
#rpart - ID3
#tree - CART
install.packages("Tree")
#기계학습의 하나로 특정항목에 대한 의사결정 규칙을 이진트리형태로 분류해나가는 기법
#수치형/ 범주형 모두가능
# 카이제곱 t검증 F검증
#CART CHAID 알고리즘이나 기계학습 계열(엔트로피,정보이득인) ID3 C4.5 C5.0
#rpart - ID3
#tree - CART
install.packages("tree")
library(tree)
plot(s2)
s2<-tree(쿠폰반응여부~.,data=s)
plot(s2)
text(s2)
# s 각변수에대해 쿠폰반응여부확인
xtabs(~결혼여부,data=s)
chisq.test(xtabs(~결혼여부,data=s))
chisq.test(xtabs(~결혼여부+쿠폰반응여부,data=s))
xtabs(~결혼여부+쿠폰반응여부,data=s)
chisq.test(xtabs(~결혼여부+쿠폰반응여부,data=s))
?Ida
?Ida()
?Ida
??Ida
idx<-sample(2,nrow(iris),replace=T,prob(0.7,0.3))
idx
idx<-sample(2,nrow(iris),replace=T,prob(0.7,0.3))
idx<-sample(2,nrow(iris),replace=T,prob=c(0.7,0.3))
idx
train.data<-iris[idx==2,]
train.data
test.data
test.data<-iri[idx==1,]
test.data<-iris[idx==1,]
test.data
?ctree
install.packages(party)
install.packages("party")
library(party)
iris<-ctree(Species~.,data=train.data)
plot(iris.tree)
library(tree)
plot(iris.tree)
iris.tree<-ctree(Species~.,data=train.data)
plot(iris.tree)
plot(iris.tree,type='simple')
#군집분석
head(orange)
#군집분석
head(Orange)
Orange
summary(Orange)
install.packages("cluster")
library(cluster)
#가장 가까운 데이터들 끼리 먼저 연결하여 트리형태로 표시
# 이러한 트리를 덴드로 그램이라함   ((Dendrogram))
a<-read.csv('c:/java/a.csv')
s
a
aca_dist<-dist(a)^2
a
#가장 가까운 데이터들 끼리 먼저 연결하여 트리형태로 표시
# 이러한 트리를 덴드로 그램이라함   ((Dendrogram))
a<-read.csv('c:/java/a.csv')
a
#가장 가까운 데이터들 끼리 먼저 연결하여 트리형태로 표시
# 이러한 트리를 덴드로 그램이라함   ((Dendrogram))
a<-read.csv('c:/java/ac.csv')
a
#가장 가까운 데이터들 끼리 먼저 연결하여 트리형태로 표시
# 이러한 트리를 덴드로 그램이라함   ((Dendrogram))
a<-read.csv('c:/java/aca.csv')
a
install.packages("cluster")
library(cluster)
aca_dist<-dist(a)^2
hc1<-hclust(aca_dist,method='single')#최단거리
plot(hc1,hang=1)
hc2<-hclust(aca_dist,method='complete')#최장거리
plot(hc2,hang=1)
hc3<-hclust(aca_dist,method='average')#평균거리
plot(hc3,hang=1)
plot(hc2,hang=1)
plot(hc1,hang=1)
plot(hc2,hang=1)
#비계층적군집방법 - k-mean
km4<-kmeans(a,4);kms4
#비계층적군집방법 - k-mean
km4<-kmeans(a,4);km4
km5<-kmeans(a,5);km4#군집 5
km6<-kmeans(a,6);km4#군집 6
plot(a,col=kn4$cluster)
plot(a,col=km4$cluster)
plot(a,col=km5$cluster)
plot(a,col=km6$cluster)
